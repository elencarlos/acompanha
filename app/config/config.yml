imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@UserBundle/Resources/config/services.yml" }
    - { resource: "@PdiBundle/Resources/config/workflow.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: pt_BR

framework:
    #esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        handler_id: session.handler.native_file
        save_path: '%kernel.root_dir%/sessions'
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    globals:
          admin_skin: "%admin_skin%"
    date:
        timezone: America/Araguaina
    form_themes:
        - 'SonataCoreBundle:Form:datepicker.html.twig'
# Doctrine Configuration
doctrine:
    dbal:
        default_connection: default
        types:
            json: Sonata\Doctrine\Types\JsonType
        connections:
            default:
                driver:   pdo_mysql
                host:     "%database_host%"
                port:     "%database_port%"
                dbname:   "%database_name%"
                user:     "%database_user%"
                password: "%database_password%"
                charset:  UTF8

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        default_entity_manager:   default
        #auto_mapping: true

        entity_managers:
            default:
                naming_strategy: doctrine.orm.naming_strategy.underscore
                connection:       default
                mappings:
                    AppBundle: ~
                    UserBundle: ~
                    FOSUserBundle: ~
                    PdiBundle: ~
                    SonataUserBundle: ~
                dql:
                    numeric_functions:
                        rand:        Mapado\MysqlDoctrineFunctions\DQL\MysqlRand
                        round:       Mapado\MysqlDoctrineFunctions\DQL\MysqlRound
                    datetime_functions:
                        date:        Mapado\MysqlDoctrineFunctions\DQL\MysqlDate
                        date_format: Mapado\MysqlDoctrineFunctions\DQL\MysqlDateFormat

#user
fos_user:
    db_driver: orm
    firewall_name: main # nombre anterior
    user_class: UFT\UserBundle\Entity\User
    group:
        group_class:   UFT\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager
    service:
        user_manager: uft_user.fos.user_manager
    from_email:
        address:        naoresponder@dti.uft.edu.br
        sender_name:    SLU/UFT - Sistema de Login Unificado

services:
    fos_user.doctrine_registry:
        alias: doctrine


# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

fr3d_ldap:
    driver:
        host: "%ldap_host%"
        username: "%ldap_username%"
        password: "%ldap_password%"
        baseDn: "%people_basedn%"
#       port:                389    # Optional
#       username:            foo    # Optional
#       password:            bar    # Optional
        bindRequiresDn:      true   # Optional
#       baseDn:              ou=users, dc=host, dc=foo   # Optional
        accountFilterFormat: '%ldap_filter%'
#        accountFilterFormat: (&(uid=%s)(memberOf=cn=Teste2,ou=Group,o=uft,dc=edu,dc=br))
#       optReferrals:        false  # Optional
#       useSsl:              true   # Enable SSL negotiation. Optional
#       useStartTls:         true   # Enable TLS negotiation. Optional
#        accountCanonicalForm: 2
       # ACCTNAME_FORM_BACKSLASH this is only needed if your users have to login with something like HOST\User
#       accountDomainName: HOST
#       accountDomainNameShort: HOST # if you use the Backslash form set both to Hostname than the Username will be converted to HOST\User
    user:
        baseDn: "%ldap_basedn%"
#        filter: '(memberOf=cn=Sistema - SLU,ou=Group,dc=uft,dc=edu,dc=br)'
        attributes:
            - { ldap_attr: uid,  user_method: setUsername }
            - { ldap_attr: mail, user_method: setEmail }
        # Specify ldap attributes mapping [ldap attribute, user object method]
#           - { ldap_attr: uid,  user_method: setUsername } # Default
#           - { ldap_attr: cn,   user_method: setName }     # Optional

#           - { ldap_attr: ...,  user_method: ... }         # Optional
    service:
        user_hydrator: uft_user.ldap.user_hydrator
#       user_manager: fos_user.user_manager          # Overrides default user manager

sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb
    class:
        user:       UFT\UserBundle\Entity\User
        group:      UFT\UserBundle\Entity\Group
    admin:                  # Admin Classes
        user:
            class:          UFT\UserBundle\Admin\UserAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

        group:
            class:          UFT\UserBundle\Admin\GroupAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle
    impersonating:
            route: sonata_admin_dashboard


sonata_block:
    default_contexts: [cms]
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]
        # ...
        # blocos do sonata user bundle
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes
        # ...

sonata_admin:
    title:      'PDI'
    title_logo: /bundles/app/image/pdi.png
    options:
        use_select2: true
        use_icheck: true

    templates:
        layout: '::base-sonata.html.twig'

    security:
        handler: sonata.admin.security.handler.acl
        # acl security information
        information:
            GUEST:    [VIEW, LIST]
            USER:     [VIEW, LIST]
            STAFF:    [EDIT, LIST, CREATE]
            EDITOR:   [OPERATOR, EXPORT]
            ADMIN:    [MASTER]

        # permissions not related to an object instance and also to be available when objects do not exist
        # the DELETE admin permission means the user is allowed to batch delete objects
        admin_permissions: [CREATE, LIST, DELETE, UNDELETE, EXPORT, OPERATOR, MASTER]

        # permission related to the objects
        object_permissions: [VIEW, EDIT, DELETE, UNDELETE, OPERATOR, MASTER, OWNER]
    dashboard:
            blocks:
                -
                    position: left
                    type: sonata.admin.block.admin_list
                    roles: [ROLE_SUPER_ADMIN]
            groups:
                usuarios:
                    label: Gestão de Usuários
                    icon:  '<i class="fa fa-users"></i>'
                    items:
                        - sonata.user.admin.group
                        - sonata.user.admin.user
                    roles: [ROLE_ADMIN]

                admin:
                    label: Admin
                    icon:  '<i class="fa fa-cogs"></i>'
                    roles: [ROLE_SUPER_ADMIN]
